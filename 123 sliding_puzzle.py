# -*- coding: utf-8 -*-
"""
Created on Wed Jan 31 11:53:06 2018

@author: harrisot

On a 2x3 board, there are 5 tiles represented by the integers 1 through 5, 
and an empty square represented by 0.

A move consists of choosing 0 and a 4-directionally adjacent 
number and swapping it.

The state of the board is solved if and only if the board is 
[[1,2,3],
 [4,5,0]].

Given a puzzle board, return the least number of moves required 
so that the state of the board is solved. If it is impossible 
for the state of the board to be solved, return -1.

Examples:

Input: board = [[1,2,3],[4,0,5]]
Output: 1
Explanation: Swap the 0 and the 5 in one move.
Input: board = [[1,2,3],[5,4,0]]
Output: -1
Explanation: No number of moves will make the board solved.
Input: board = [[4,1,2],[5,0,3]]
Output: 5
Explanation: 5 is the smallest number of moves that solves the board.
An example path:
After move 0: [[4,1,2],[5,0,3]]
After move 1: [[4,1,2],[0,5,3]]
After move 2: [[0,1,2],[4,5,3]]
After move 3: [[1,0,2],[4,5,3]]
After move 4: [[1,2,0],[4,l5,3]]
After move 5: [[1,2,3],[4,5,0]]
Input: board = [[3,2,4],[1,5,0]]
Output: 14
Note:

board will be a 2 x 3 array as described above.
board[i][j] will be a permutation of [0, 1, 2, 3, 4, 5].
"""
from copy import deepcopy

class Solution(object):
  
  def sliding_puzzle(self, board):
    board_key = tuple(map(tuple, board))
    mem = {((1,2,3),(4,5,0)): 0}   
    pos = [[[1,2,3],[4,5,0]]]
    
    while pos: 
      state = pos.pop(0) # breadth first search
      state_key = tuple(map(tuple, state))
      
      # find where 0 is
      i = j = 0
      for _i in range(2):
        for _j in range(3):
          if state[_i][_j] == 0:
            i = _i; j = _j
            break
      
      # expand state
      for ii, jj in [[i-1,j],[i+1,j],[i,j-1],[i,j+1]]:

        if 0 <= ii <= 1 and 0 <= jj <= 2:
          temp = deepcopy(state)
          temp[ii][jj], temp[i][j] = temp[i][j], temp[ii][jj]
          temp_key = tuple(map(tuple, temp))
          
          if temp_key not in mem:
            pos.append(temp)
            mem.update({temp_key: mem[state_key]+1})

    if board_key in mem:
      return mem[board_key]
    return -1
  
board1 = [[4,1,2],[5,0,3]]
board2 = [[4,1,2],[0,5,3]]
board3 = [[0,1,2],[4,5,3]]
board4 = [[1,0,2],[4,5,3]]
board5 = [[1,2,0],[4,5,3]]
board6 = [[3,2,4],[1,5,0]]

solution = Solution()
print(solution.sliding_puzzle(board1))


for board in [board1, board2, board3, board4, board5, board6]:
  print(solution.sliding_puzzle(board))

mem ={((4, 5, 1), (2, 0, 3)): 9, ((2, 3, 4), (0, 5, 1)): 16, ((1, 3, 4), (0, 2, 5)): 14, ((1, 2, 3), (4, 0, 5)): 1, ((1, 5, 0), (4, 3, 2)): 5, ((3, 0, 4), (2, 5, 1)): 14, ((0, 1, 2), (4, 5, 3)): 3, ((1, 2, 0), (4, 5, 3)): 1, ((2, 5, 1), (3, 4, 0)): 16, ((1, 5, 3), (2, 4, 0)): 14, ((3, 0, 4), (1, 2, 5)): 12, ((5, 4, 1), (3, 0, 2)): 11, ((3, 2, 4), (1, 0, 5)): 13, ((4, 0, 5), (2, 3, 1)): 10, ((5, 1, 0), (3, 4, 2)): 13, ((0, 2, 4), (1, 5, 3)): 9, ((4, 1, 0), (2, 5, 3)): 7, ((2, 3, 5), (1, 4, 0)): 6, ((3, 2, 5), (0, 4, 1)): 14, ((4, 5, 0), (3, 1, 2)): 11, ((5, 4, 2), (1, 3, 0)): 8, ((5, 1, 2), (3, 0, 4)): 15, ((1, 0, 5), (4, 3, 2)): 6, ((1, 2, 5), (3, 4, 0)): 12, ((3, 1, 5), (0, 2, 4)): 12, ((5, 2, 3), (1, 4, 0)): 8, ((1, 2, 4), (5, 0, 3)): 11, ((0, 4, 5), (3, 1, 2)): 11, ((5, 3, 1), (2, 0, 4)): 17, ((3, 5, 4), (2, 0, 1)): 13, ((4, 0, 5), (3, 1, 2)): 10, ((2, 4, 3), (1, 0, 5)): 5, ((3, 0, 2), (5, 4, 1)): 18, ((0, 5, 4), (1, 3, 2)): 11, ((5, 0, 1), (4, 2, 3)): 12, ((3, 5, 4), (0, 2, 1)): 14, ((1, 0, 2), (3, 4, 5)): 14, ((0, 2, 3), (5, 1, 4)): 11, ((1, 4, 5), (0, 2, 3)): 18, ((4, 3, 5), (0, 2, 1)): 10, ((5, 2, 3), (1, 0, 4)): 9, ((1, 3, 0), (2, 5, 4)): 15, ((3, 4, 1), (2, 5, 0)): 16, ((4, 1, 5), (0, 3, 2)): 8, ((1, 3, 2), (5, 4, 0)): 16, ((0, 1, 5), (4, 3, 2)): 7, ((0, 1, 4), (2, 3, 5)): 17, ((0, 5, 2), (1, 4, 3)): 5, ((4, 3, 2), (0, 1, 5)): 18, ((2, 4, 1), (5, 0, 3)): 11, ((5, 1, 0), (2, 3, 4)): 15, ((5, 4, 1), (0, 3, 2)): 10, ((0, 3, 5), (2, 1, 4)): 9, ((0, 1, 5), (3, 2, 4)): 13, ((4, 2, 3), (5, 0, 1)): 9, ((0, 5, 1), (3, 4, 2)): 13, ((2, 4, 0), (1, 5, 3)): 7, ((4, 2, 0), (1, 3, 5)): 19, ((0, 3, 2), (5, 4, 1)): 19, ((5, 1, 3), (4, 0, 2)): 15, ((5, 0, 2), (1, 4, 3)): 6, ((3, 5, 1), (0, 4, 2)): 14, ((1, 5, 0), (3, 2, 4)): 13, ((5, 2, 0), (1, 4, 3)): 7, ((4, 5, 3), (1, 0, 2)): 19, ((2, 5, 0), (1, 3, 4)): 9, ((3, 0, 2), (4, 1, 5)): 16, ((0, 4, 5), (1, 2, 3)): 19, ((1, 0, 3), (4, 2, 5)): 2, ((4, 0, 3), (2, 1, 5)): 6, ((2, 0, 4), (3, 1, 5)): 16, ((1, 4, 0), (3, 5, 2)): 15, ((0, 4, 2), (5, 1, 3)): 7, ((1, 2, 5), (3, 0, 4)): 11, ((1, 5, 2), (4, 0, 3)): 3, ((4, 5, 3), (0, 1, 2)): 18, ((5, 3, 0), (2, 4, 1)): 15, ((3, 2, 4), (0, 1, 5)): 14, ((2, 0, 5), (4, 1, 3)): 16, ((5, 4, 3), (0, 2, 1)): 12, ((3, 0, 1), (4, 5, 2)): 12, ((2, 1, 0), (3, 5, 4)): 19, ((2, 4, 1), (5, 3, 0)): 12, ((4, 5, 1), (0, 2, 3)): 10, ((5, 2, 1), (4, 0, 3)): 13, ((1, 0, 3), (5, 4, 2)): 16, ((2, 3, 1), (4, 0, 5)): 15, ((3, 1, 2), (4, 5, 0)): 14, ((4, 3, 0), (1, 5, 2)): 19, ((4, 1, 5), (3, 0, 2)): 9, ((3, 4, 2), (5, 0, 1)): 17, ((4, 1, 2), (5, 0, 3)): 5, ((4, 0, 1), (5, 3, 2)): 8, ((2, 4, 3), (1, 5, 0)): 6, ((0, 1, 3), (4, 2, 5)): 3, ((1, 2, 3), (0, 4, 5)): 2, ((1, 4, 3), (0, 5, 2)): 16, ((4, 0, 3), (1, 5, 2)): 18, ((0, 3, 4), (1, 2, 5)): 13, ((2, 3, 0), (4, 5, 1)): 13, ((5, 0, 3), (2, 4, 1)): 14, ((2, 4, 1), (0, 5, 3)): 10, ((4, 5, 3), (1, 2, 0)): 20, ((3, 0, 1), (5, 2, 4)): 18, ((5, 0, 3), (4, 1, 2)): 16, ((2, 5, 0), (3, 4, 1)): 15, ((0, 2, 4), (5, 3, 1)): 15, ((1, 0, 2), (4, 5, 3)): 2, ((4, 1, 5), (3, 2, 0)): 10, ((0, 1, 3), (5, 4, 2)): 17, ((2, 5, 1), (0, 3, 4)): 18, ((3, 5, 0), (2, 1, 4)): 11, ((3, 1, 0), (5, 2, 4)): 17, ((0, 4, 3), (2, 1, 5)): 7, ((0, 5, 1), (4, 2, 3)): 11, ((5, 4, 3), (2, 1, 0)): 14, ((3, 1, 5), (2, 0, 4)): 11, ((4, 5, 1), (2, 3, 0)): 10, ((1, 3, 5), (0, 4, 2)): 6, ((0, 5, 2), (4, 3, 1)): 15, ((1, 2, 4), (0, 5, 3)): 10, ((5, 3, 4), (1, 2, 0)): 12, ((4, 0, 2), (5, 1, 3)): 6, ((3, 2, 0), (1, 5, 4)): 13, ((1, 3, 0), (5, 4, 2)): 17, ((4, 2, 0), (3, 5, 1)): 15, ((5, 3, 2), (4, 1, 0)): 18, ((3, 2, 1), (5, 4, 0)): 20, ((1, 4, 0), (2, 3, 5)): 17, ((3, 1, 4), (5, 0, 2)): 15, ((4, 2, 5), (1, 0, 3)): 19, ((3, 0, 5), (4, 2, 1)): 12, ((3, 5, 1), (4, 2, 0)): 14, ((0, 3, 2), (1, 5, 4)): 13, ((3, 2, 4), (1, 5, 0)): 14, ((4, 1, 0), (5, 3, 2)): 7, ((1, 0, 3), (2, 5, 4)): 14, ((4, 3, 1), (5, 2, 0)): 10, ((5, 0, 4), (1, 3, 2)): 10, ((5, 3, 4), (1, 0, 2)): 11, ((4, 3, 5), (2, 0, 1)): 9, ((4, 3, 2), (1, 0, 5)): 19, ((5, 2, 3), (0, 1, 4)): 10, ((3, 4, 2), (0, 5, 1)): 16, ((5, 2, 1), (4, 3, 0)): 14, ((3, 2, 1), (0, 5, 4)): 20, ((3, 1, 0), (2, 4, 5)): 13, ((4, 3, 5), (2, 1, 0)): 8, ((1, 5, 2), (0, 4, 3)): 4, ((3, 4, 0), (2, 5, 1)): 15, ((0, 4, 2), (3, 5, 1)): 15, ((3, 2, 5), (4, 1, 0)): 14, ((3, 5, 4), (2, 1, 0)): 12, ((2, 3, 1), (0, 4, 5)): 16, ((3, 4, 0), (1, 2, 5)): 11, ((4, 2, 1), (0, 3, 5)): 14, ((3, 4, 5), (1, 0, 2)): 9, ((2, 4, 5), (3, 0, 1)): 13, ((1, 5, 0), (2, 4, 3)): 15, ((3, 1, 5), (2, 4, 0)): 12, ((2, 5, 4), (1, 0, 3)): 9, ((2, 4, 5), (0, 3, 1)): 12, ((4, 5, 2), (3, 1, 0)): 12, ((1, 3, 2), (0, 5, 4)): 14, ((3, 4, 0), (5, 1, 2)): 15, ((2, 0, 3), (4, 5, 1)): 12, ((5, 1, 4), (2, 3, 0)): 14, ((5, 1, 3), (0, 4, 2)): 16, ((3, 1, 0), (4, 5, 2)): 13, ((4, 0, 2), (3, 5, 1)): 14, ((0, 4, 3), (1, 5, 2)): 17, ((5, 2, 0), (4, 3, 1)): 15, ((0, 5, 1), (2, 3, 4)): 17, ((5, 3, 0), (1, 2, 4)): 11, ((0, 3, 1), (2, 4, 5)): 15, ((5, 4, 1), (3, 2, 0)): 12, ((1, 0, 5), (2, 4, 3)): 16, ((4, 1, 3), (0, 2, 5)): 4, ((5, 0, 3), (1, 2, 4)): 10, ((2, 1, 4), (0, 3, 5)): 18, ((1, 0, 5), (3, 2, 4)): 12, ((2, 5, 3), (0, 4, 1)): 14, ((4, 3, 2), (1, 5, 0)): 20, ((2, 1, 5), (4, 0, 3)): 17, ((3, 1, 4), (0, 5, 2)): 16, ((2, 4, 3), (0, 1, 5)): 6, ((2, 5, 3), (4, 0, 1)): 13, ((3, 5, 2), (0, 1, 4)): 12, ((4, 3, 1), (5, 0, 2)): 9, ((2, 3, 1), (4, 5, 0)): 14, ((2, 5, 4), (1, 3, 0)): 10, ((1, 5, 2), (4, 3, 0)): 4, ((2, 5, 0), (4, 1, 3)): 15, ((2, 1, 3), (5, 0, 4)): 13, ((0, 3, 1), (5, 2, 4)): 19, ((1, 3, 5), (4, 0, 2)): 5, ((2, 0, 4), (5, 3, 1)): 14, ((2, 1, 5), (0, 4, 3)): 18, ((4, 5, 2), (3, 0, 1)): 13, ((0, 5, 2), (3, 1, 4)): 13, ((0, 2, 1), (3, 5, 4)): 19, ((5, 1, 4), (0, 2, 3)): 14, ((2, 1, 5), (4, 3, 0)): 18, ((3, 4, 1), (0, 2, 5)): 14, ((1, 0, 4), (3, 5, 2)): 14, ((0, 2, 3), (1, 4, 5)): 3, ((4, 2, 5), (1, 3, 0)): 20, ((1, 4, 3), (5, 0, 2)): 15, ((1, 5, 4), (3, 0, 2)): 13, ((5, 4, 0), (2, 1, 3)): 13, ((5, 4, 2), (1, 0, 3)): 7, ((1, 5, 3), (0, 2, 4)): 12, ((0, 4, 5), (2, 3, 1)): 11, ((4, 2, 3), (0, 5, 1)): 10, ((1, 0, 2), (5, 3, 4)): 14, ((2, 5, 4), (0, 1, 3)): 10, ((2, 3, 0), (1, 4, 5)): 5, ((0, 3, 5), (1, 4, 2)): 7, ((3, 2, 0), (5, 4, 1)): 19, ((0, 3, 2), (4, 1, 5)): 17, ((0, 4, 1), (5, 3, 2)): 9, ((2, 0, 1), (5, 4, 3)): 12, ((5, 1, 4), (2, 0, 3)): 13, ((4, 3, 1), (0, 5, 2)): 10, ((2, 3, 4), (5, 0, 1)): 15, ((3, 0, 5), (2, 1, 4)): 10, ((0, 5, 3), (2, 4, 1)): 15, ((5, 0, 1), (3, 4, 2)): 12, ((1, 3, 4), (2, 0, 5)): 15, ((1, 4, 5), (2, 0, 3)): 17, ((3, 1, 4), (5, 2, 0)): 16, ((0, 2, 5), (4, 1, 3)): 17, ((3, 2, 5), (4, 0, 1)): 13, ((5, 0, 4), (3, 2, 1)): 14, ((2, 0, 3), (5, 1, 4)): 12, ((5, 0, 1), (2, 3, 4)): 16, ((2, 1, 3), (0, 5, 4)): 14, ((1, 2, 0), (3, 4, 5)): 13, ((0, 1, 2), (3, 4, 5)): 15, ((5, 1, 3), (4, 2, 0)): 14, ((5, 4, 2), (0, 1, 3)): 8, ((2, 0, 1), (3, 5, 4)): 18, ((0, 3, 1), (4, 5, 2)): 11, ((4, 3, 0), (2, 1, 5)): 7, ((1, 4, 0), (5, 2, 3)): 13, ((4, 1, 3), (2, 0, 5)): 5, ((5, 0, 4), (2, 1, 3)): 12, ((4, 2, 0), (5, 1, 3)): 7, ((0, 2, 3), (4, 5, 1)): 11, ((1, 4, 5), (2, 3, 0)): 18, ((3, 4, 1), (2, 0, 5)): 15, ((3, 5, 2), (1, 0, 4)): 11, ((5, 1, 0), (4, 2, 3)): 13, ((1, 2, 0), (5, 3, 4)): 13, ((4, 0, 2), (1, 3, 5)): 18, ((1, 4, 3), (5, 2, 0)): 14, ((2, 1, 0), (5, 4, 3)): 13, ((4, 1, 0), (3, 2, 5)): 11, ((2, 4, 0), (5, 3, 1)): 13, ((1, 0, 4), (2, 3, 5)): 16, ((1, 5, 4), (3, 2, 0)): 14, ((5, 1, 2), (3, 4, 0)): 14, ((5, 3, 1), (2, 4, 0)): 16, ((2, 3, 5), (0, 1, 4)): 8, ((0, 2, 4), (3, 1, 5)): 15, ((4, 2, 1), (3, 5, 0)): 14, ((4, 5, 0), (1, 2, 3)): 21, ((0, 4, 2), (1, 3, 5)): 17, ((4, 0, 5), (1, 2, 3)): 20, ((4, 2, 3), (5, 1, 0)): 8, ((2, 0, 5), (1, 3, 4)): 8, ((5, 0, 2), (3, 1, 4)): 14, ((1, 3, 2), (5, 0, 4)): 15, ((0, 2, 1), (5, 4, 3)): 13, ((1, 5, 4), (0, 3, 2)): 12, ((2, 5, 3), (4, 1, 0)): 14, ((0, 3, 4), (2, 5, 1)): 15, ((2, 1, 4), (3, 0, 5)): 17, ((3, 5, 0), (4, 2, 1)): 13, ((5, 4, 0), (3, 2, 1)): 13, ((0, 5, 4), (3, 2, 1)): 15, ((4, 5, 0), (2, 3, 1)): 11, ((5, 4, 0), (1, 3, 2)): 9, ((0, 3, 4), (5, 1, 2)): 13, ((5, 0, 2), (4, 3, 1)): 16, ((4, 0, 1), (3, 2, 5)): 12, ((0, 1, 4), (3, 5, 2)): 15, ((4, 1, 2), (0, 5, 3)): 4, ((5, 2, 4), (0, 3, 1)): 16, ((1, 3, 4), (2, 5, 0)): 16, ((3, 0, 4), (5, 1, 2)): 14, ((3, 4, 5), (1, 2, 0)): 10, ((0, 4, 1), (3, 2, 5)): 13, ((2, 4, 0), (3, 1, 5)): 15, ((1, 4, 2), (0, 3, 5)): 16, ((3, 1, 2), (0, 4, 5)): 16, ((2, 3, 4), (5, 1, 0)): 14, ((1, 0, 4), (5, 2, 3)): 12, ((3, 5, 2), (1, 4, 0)): 10, ((0, 4, 1), (2, 5, 3)): 9, ((0, 4, 3), (5, 2, 1)): 11, ((1, 3, 0), (4, 2, 5)): 3, ((3, 4, 2), (5, 1, 0)): 16, ((0, 2, 1), (4, 3, 5)): 15, ((2, 0, 1), (4, 3, 5)): 16, ((0, 5, 3), (1, 2, 4)): 11, ((4, 2, 1), (3, 0, 5)): 13, ((0, 1, 3), (2, 5, 4)): 15, ((4, 0, 3), (5, 2, 1)): 10, ((3, 5, 0), (1, 4, 2)): 9, ((0, 2, 5), (3, 4, 1)): 15, ((0, 1, 4), (5, 2, 3)): 13, ((2, 3, 0), (5, 1, 4)): 13, ((5, 3, 1), (0, 2, 4)): 18, ((3, 2, 1), (5, 0, 4)): 19, ((5, 3, 2), (0, 4, 1)): 18, ((0, 5, 3), (4, 1, 2)): 17, ((4, 3, 0), (5, 2, 1)): 11, ((3, 0, 5), (1, 4, 2)): 8, ((2, 1, 4), (3, 5, 0)): 18, ((1, 4, 2), (3, 5, 0)): 16, ((3, 4, 5), (0, 1, 2)): 10, ((3, 0, 2), (1, 5, 4)): 12, ((4, 0, 1), (2, 5, 3)): 8, ((5, 2, 1), (0, 4, 3)): 14, ((0, 1, 5), (2, 4, 3)): 17, ((2, 0, 5), (3, 4, 1)): 14, ((2, 1, 3), (5, 4, 0)): 14, ((4, 1, 3), (2, 5, 0)): 6, ((0, 3, 5), (4, 2, 1)): 11, ((2, 5, 1), (3, 0, 4)): 17, ((1, 5, 3), (2, 0, 4)): 13, ((5, 2, 4), (3, 0, 1)): 15, ((2, 0, 3), (1, 4, 5)): 4, ((2, 3, 5), (1, 0, 4)): 7, ((2, 1, 0), (4, 3, 5)): 17, ((5, 2, 0), (3, 1, 4)): 15, ((5, 2, 4), (3, 1, 0)): 16, ((2, 4, 5), (3, 1, 0)): 14, ((4, 1, 2), (5, 3, 0)): 6, ((3, 0, 1), (2, 4, 5)): 14, ((0, 5, 4), (2, 1, 3)): 11, ((1, 4, 2), (3, 0, 5)): 15, ((3, 1, 2), (4, 0, 5)): 15, ((0, 2, 5), (1, 3, 4)): 9, ((4, 2, 5), (0, 1, 3)): 18, ((5, 3, 2), (4, 0, 1)): 17, ((1, 2, 4), (5, 3, 0)): 12, ((1, 2, 3), (4, 5, 0)): 0, ((5, 3, 0), (4, 1, 2)): 17, ((5, 1, 2), (0, 3, 4)): 16, ((0, 1, 2), (5, 3, 4)): 15, ((4, 5, 2), (0, 3, 1)): 14, ((3, 2, 0), (4, 1, 5)): 15, ((5, 3, 4), (0, 1, 2)): 12, ((2, 0, 4), (1, 5, 3)): 8, ((3, 5, 1), (4, 0, 2)): 13, ((1, 3, 5), (4, 2, 0)): 4, ((1, 2, 5), (0, 3, 4)): 10, ((5, 4, 3), (2, 0, 1)): 13}
  

